// Generated by gencpp from file ros_opencart/Item.msg
// DO NOT EDIT!


#ifndef ROS_OPENCART_MESSAGE_ITEM_H
#define ROS_OPENCART_MESSAGE_ITEM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_opencart
{
template <class ContainerAllocator>
struct Item_
{
  typedef Item_<ContainerAllocator> Type;

  Item_()
    : product()
    , model()
    , quantity(0)
    , price(0.0)  {
    }
  Item_(const ContainerAllocator& _alloc)
    : product(_alloc)
    , model(_alloc)
    , quantity(0)
    , price(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _product_type;
  _product_type product;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _model_type;
  _model_type model;

   typedef int32_t _quantity_type;
  _quantity_type quantity;

   typedef double _price_type;
  _price_type price;




  typedef boost::shared_ptr< ::ros_opencart::Item_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_opencart::Item_<ContainerAllocator> const> ConstPtr;

}; // struct Item_

typedef ::ros_opencart::Item_<std::allocator<void> > Item;

typedef boost::shared_ptr< ::ros_opencart::Item > ItemPtr;
typedef boost::shared_ptr< ::ros_opencart::Item const> ItemConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_opencart::Item_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_opencart::Item_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_opencart

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ros_opencart': ['/home/christian/ros_opencart/src/ros_opencart/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_opencart::Item_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_opencart::Item_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_opencart::Item_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_opencart::Item_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_opencart::Item_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_opencart::Item_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_opencart::Item_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1bb7472e8d54d0935a7e1ca6f4414ebd";
  }

  static const char* value(const ::ros_opencart::Item_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1bb7472e8d54d093ULL;
  static const uint64_t static_value2 = 0x5a7e1ca6f4414ebdULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_opencart::Item_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_opencart/Item";
  }

  static const char* value(const ::ros_opencart::Item_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_opencart::Item_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string product	# Product name\n\
string model	# Product number\n\
int32 quantity\n\
float64 price\n\
\n\
";
  }

  static const char* value(const ::ros_opencart::Item_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_opencart::Item_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.product);
      stream.next(m.model);
      stream.next(m.quantity);
      stream.next(m.price);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Item_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_opencart::Item_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_opencart::Item_<ContainerAllocator>& v)
  {
    s << indent << "product: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.product);
    s << indent << "model: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.model);
    s << indent << "quantity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.quantity);
    s << indent << "price: ";
    Printer<double>::stream(s, indent + "  ", v.price);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_OPENCART_MESSAGE_ITEM_H
