// Generated by gencpp from file ros_opencart/GetCurrentOrdersResponse.msg
// DO NOT EDIT!


#ifndef ROS_OPENCART_MESSAGE_GETCURRENTORDERSRESPONSE_H
#define ROS_OPENCART_MESSAGE_GETCURRENTORDERSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_opencart/Order.h>

namespace ros_opencart
{
template <class ContainerAllocator>
struct GetCurrentOrdersResponse_
{
  typedef GetCurrentOrdersResponse_<ContainerAllocator> Type;

  GetCurrentOrdersResponse_()
    : errorcode(0)
    , errormsg()
    , orders()  {
    }
  GetCurrentOrdersResponse_(const ContainerAllocator& _alloc)
    : errorcode(0)
    , errormsg(_alloc)
    , orders(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _errorcode_type;
  _errorcode_type errorcode;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _errormsg_type;
  _errormsg_type errormsg;

   typedef std::vector< ::ros_opencart::Order_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ros_opencart::Order_<ContainerAllocator> >::other >  _orders_type;
  _orders_type orders;




  typedef boost::shared_ptr< ::ros_opencart::GetCurrentOrdersResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_opencart::GetCurrentOrdersResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetCurrentOrdersResponse_

typedef ::ros_opencart::GetCurrentOrdersResponse_<std::allocator<void> > GetCurrentOrdersResponse;

typedef boost::shared_ptr< ::ros_opencart::GetCurrentOrdersResponse > GetCurrentOrdersResponsePtr;
typedef boost::shared_ptr< ::ros_opencart::GetCurrentOrdersResponse const> GetCurrentOrdersResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_opencart::GetCurrentOrdersResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_opencart::GetCurrentOrdersResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_opencart

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ros_opencart': ['/home/christian/ros_opencart/src/ros_opencart/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_opencart::GetCurrentOrdersResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_opencart::GetCurrentOrdersResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_opencart::GetCurrentOrdersResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_opencart::GetCurrentOrdersResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_opencart::GetCurrentOrdersResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_opencart::GetCurrentOrdersResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_opencart::GetCurrentOrdersResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "50e0ba130e3fdef0430aac43454e1263";
  }

  static const char* value(const ::ros_opencart::GetCurrentOrdersResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x50e0ba130e3fdef0ULL;
  static const uint64_t static_value2 = 0x430aac43454e1263ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_opencart::GetCurrentOrdersResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_opencart/GetCurrentOrdersResponse";
  }

  static const char* value(const ::ros_opencart::GetCurrentOrdersResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_opencart::GetCurrentOrdersResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 errorcode\n\
string errormsg\n\
Order[] orders\n\
\n\
\n\
================================================================================\n\
MSG: ros_opencart/Order\n\
int32 id\n\
string status\n\
string firstName\n\
string lastName\n\
string address1\n\
string address2\n\
string room\n\
string zip\n\
string city\n\
string email\n\
string telephone\n\
Item[] items\n\
\n\
================================================================================\n\
MSG: ros_opencart/Item\n\
string product	# Product name\n\
string model	# Product number\n\
int32 quantity\n\
float64 price\n\
\n\
";
  }

  static const char* value(const ::ros_opencart::GetCurrentOrdersResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_opencart::GetCurrentOrdersResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.errorcode);
      stream.next(m.errormsg);
      stream.next(m.orders);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetCurrentOrdersResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_opencart::GetCurrentOrdersResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_opencart::GetCurrentOrdersResponse_<ContainerAllocator>& v)
  {
    s << indent << "errorcode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.errorcode);
    s << indent << "errormsg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.errormsg);
    s << indent << "orders[]" << std::endl;
    for (size_t i = 0; i < v.orders.size(); ++i)
    {
      s << indent << "  orders[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_opencart::Order_<ContainerAllocator> >::stream(s, indent + "    ", v.orders[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_OPENCART_MESSAGE_GETCURRENTORDERSRESPONSE_H
